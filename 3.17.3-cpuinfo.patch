--- origsrc/cmake-3.17.3/Source/kwsys/SystemInformation.cxx	2020-05-28 12:57:26.000000000 +0200
+++ src/cmake-3.17.3/Source/kwsys/SystemInformation.cxx	2020-06-20 15:58:53.222377800 +0200
@@ -864,7 +864,7 @@ void SystemInformation::RunMemoryCheck()
 // Hide implementation details in an anonymous namespace.
 namespace {
 // *****************************************************************************
-#if defined(__linux) || defined(__APPLE__)
+#if defined(__linux) || defined(__APPLE__) || defined(__CYGWIN__)
 int LoadLines(FILE* file, std::vector<std::string>& lines)
 {
   // Load each line in the given file into a the vector.
@@ -894,7 +894,7 @@ int LoadLines(FILE* file, std::vector<st
   return nRead;
 }
 
-#  if defined(__linux)
+#  if defined(__linux) || defined(__CYGWIN__)
 // *****************************************************************************
 int LoadLines(const char* fileName, std::vector<std::string>& lines)
 {
@@ -927,7 +927,7 @@ int NameValue(std::vector<std::string> c
 }
 #endif
 
-#if defined(__linux)
+#if defined(__linux) || defined(__CYGWIN__)
 // ****************************************************************************
 template <typename T>
 int GetFieldsFromFile(const char* fileName, const char** fieldNames, T* values)
@@ -3393,7 +3393,6 @@ bool SystemInformationImplementation::Re
     pos = buffer.find("processor\t", pos + 1);
   }
 
-#ifdef __linux
   // Count sockets.
   std::set<int> PhysicalIDs;
   std::string idc = this->ExtractValueFromCpuInfoFile(buffer, "physical id");
@@ -3414,14 +3413,6 @@ bool SystemInformationImplementation::Re
   this->NumberOfPhysicalCPU =
     NumberOfCoresPerSocket * (unsigned int)NumberOfSockets;
 
-#else // __CYGWIN__
-  // does not have "physical id" entries, neither "cpu cores"
-  // this has to be fixed for hyper-threading.
-  std::string cpucount =
-    this->ExtractValueFromCpuInfoFile(buffer, "cpu count");
-  this->NumberOfPhysicalCPU = this->NumberOfLogicalCPU =
-    atoi(cpucount.c_str());
-#endif
   // gotta have one, and if this is 0 then we get a / by 0n
   // better to have a bad answer than a crash
   if (this->NumberOfPhysicalCPU <= 0) {
@@ -3599,7 +3590,7 @@ SystemInformationImplementation::GetHost
   GlobalMemoryStatusEx(&statex);
   return statex.ullTotalPhys / 1024;
 #  endif
-#elif defined(__linux)
+#elif defined(__linux) || defined(__CYGWIN__)
   SystemInformation::LongLong memTotal = 0;
   int ierr = GetFieldFromFile("/proc/meminfo", "MemTotal:", memTotal);
   if (ierr) {
@@ -3724,29 +3715,16 @@ SystemInformationImplementation::GetHost
   GlobalMemoryStatusEx(&statex);
   return (statex.ullTotalPhys - statex.ullAvailPhys) / 1024;
 #  endif
-#elif defined(__linux)
-  // First try to use MemAvailable, but it only works on newer kernels
-  const char* names2[3] = { "MemTotal:", "MemAvailable:", nullptr };
-  SystemInformation::LongLong values2[2] = { SystemInformation::LongLong(0) };
-  int ierr = GetFieldsFromFile("/proc/meminfo", names2, values2);
+#elif defined(__linux) || defined(__CYGWIN__)
+  const char* names[3] = { "MemTotal:", "MemAvailable:", NULL };
+  SystemInformation::LongLong values[2] = { SystemInformation::LongLong(0) };
+  int ierr = GetFieldsFromFile("/proc/meminfo", names, values);
   if (ierr) {
-    const char* names4[5] = { "MemTotal:", "MemFree:", "Buffers:", "Cached:",
-                              nullptr };
-    SystemInformation::LongLong values4[4] = { SystemInformation::LongLong(
-      0) };
-    ierr = GetFieldsFromFile("/proc/meminfo", names4, values4);
-    if (ierr) {
-      return ierr;
+    return ierr;
     }
-    SystemInformation::LongLong& memTotal = values4[0];
-    SystemInformation::LongLong& memFree = values4[1];
-    SystemInformation::LongLong& memBuffers = values4[2];
-    SystemInformation::LongLong& memCached = values4[3];
-    return memTotal - memFree - memBuffers - memCached;
-  }
-  SystemInformation::LongLong& memTotal = values2[0];
-  SystemInformation::LongLong& memAvail = values2[1];
-  return memTotal - memAvail;
+  SystemInformation::LongLong& memTotal = values[0];
+  SystemInformation::LongLong& memFree = values[1];
+  return memTotal - memFree;
 #elif defined(__APPLE__)
   SystemInformation::LongLong psz = getpagesize();
   if (psz < 1) {
@@ -3787,7 +3765,7 @@ SystemInformationImplementation::GetProc
     return -2;
   }
   return pmc.WorkingSetSize / 1024;
-#elif defined(__linux)
+#elif defined(__linux) || defined(__CYGWIN__)
   SystemInformation::LongLong memUsed = 0;
   int ierr = GetFieldFromFile("/proc/self/status", "VmRSS:", memUsed);
   if (ierr) {
@@ -3864,7 +3842,8 @@ SystemInformation::LongLong SystemInform
 #if defined(_WIN32)
   return GetCurrentProcessId();
 #elif defined(__linux) || defined(__APPLE__) || defined(__OpenBSD__) ||       \
-  defined(__FreeBSD__) || defined(__NetBSD__) || defined(__DragonFly__)
+  defined(__FreeBSD__) || defined(__NetBSD__) || defined(__DragonFly__) ||    \
+  defined(__CYGWIN__)
   return getpid();
 #else
   return -1;
